<?xml version="1.0" encoding="ISO-8859-1"?>
<document signature="Hero Lab Data">
  <fileinfo>
    <info_author>
Tim Shadow
Email: ShadowChemosh@yahoo.com
    </info_author>
    <info_history><![CDATA[
September 30, 2012 - Tim Shadow
-Removed "CntMartWea" so we don't clash with the "SGG" data set.
    
September 9, 2012
-HaveSpell converted to HavePower for use with Psionics.

July 12, 2012
-HaveSpell and CntMartWea are meant to be used in a "Pre-Req" script only.
-Added the new procedure "HaveSpell" to test if a character has access to a specific spell ID.
-Added the new procedure "CntMartWea" to count the number of martial weapon proficiencies a character has. 
]]>
    </info_history>
  </fileinfo>


  <procedure id="HavePower" scripttype="validate"><![CDATA[
    ~ This procedure tests if a character has a specific spell and sets the valid field
    ~ ===How to use this Procedure===
    ~ var PowerID as String
    ~ var HavePower as number
    ~ PowerID = "spCureLig1"
    ~ Call HavePower
    ~ @valid = HavePower

    var HavePower as number
    var PowerID as string
    var s2search as string
    var s2classes as string
    var X as number
    ~ Init fields here
    X = 0
    HavePower = 0

    ~ Add thingid to the spell id passed us
    PowerID = "thingid." & PowerID
    ~ replace the | with |thingid. tag groups
    PowerID  = replace(PowerID,"|","|thingid.",0)

    ~ Get the classes that are valid for the spell ID(s) passed to us
    foreach thing in BasePower where PowerID
       ~ only do anything if we a spell with classes
       if (eachthing.tagis[sClass.?] <> 0) then
          ~ if loop counter not zero then add a seperator between strings
          if ( X <> 0) then
             ~ add a seperator between each loop
             s2classes &= "|"
          endif    
          ~ Build a search sting of all class tags
          s2classes = eachthing.tagids[sClass.?,"|"]
          ~ increment loop counter
          X += 1
       endif
    nexteach

    ~ Get the classes that are valid for the spell ID(s) passed to us
    foreach pick in hero where PowerID
       ~ only do anything if we a spell with classes
       if (eachpick.tagis[sClass.?] <> 0) then
          ~ if loop counter not zero then add a seperator between strings
          if ( X <> 0) then
             ~ add a seperator between each loop
             s2classes &= "|"
          endif    
          ~ Build a search sting of all class tags
          s2classes = eachpick.tagids[sClass.?,"|"]
          ~ increment loop counter
          X += 1
       endif
    nexteach

    ~ replace the sClass tags with thingid tag groups
    s2search = replace(s2classes,"sClass","thingid",0)

    ~ Loop through classes and see if we have one of the classes
    ~ valid for casting CLW spells
    foreach pick in hero where s2search
       HavePower = 1
    nexteach
    ]]>
  </procedure>


<!-- ****************************************************************** -->
<!-- Setup Psychic Warrior Maneuver/Trance First 10000                  -->
<!-- ****************************************************************** -->
  <procedure id="PsyWarTrMa" context="pick"><![CDATA[
    ~ If the Path Ability is Primary then set us to level 3
    If (root.field[usrIndex].value = 0) Then
       perform assign[ClSpecWhen.3]
    ~..If the Path Ability is Secondary then set us to level 11
    else 
       perform assign[ClSpecWhen.11]
    endif
    ]]>
  </procedure>


<!-- ****************************************************************** -->
<!-- Setup Psychic Warrior Path Custom Ability - First 100              -->
<!-- ****************************************************************** -->
  <procedure id="PsyWarPath" context="pick"><![CDATA[
    var s2Power as string

    ~ If Primary then set correct levels here
    If (field[usrIndex].value = 0) Then
      ~ Path Powers are level 1 & 3 only for primary
      s2Power = "thingid.cPWaPathPo & (ClSpecWhen.1|ClSpecWhen.3)"
      ~ Set Primary Path Power tag
      perform assign[PsyWarrior.PathPrim]
    ~..if Secondary then set correct levels here
    Else
      ~ Path Powers are level 9 only for secondary
      s2Power = "thingid.cPWaPathPo & (ClSpecWhen.9)"
      ~ Set Secondary Path Power tag
      perform assign[PsyWarrior.PathSec]
    Endif

    ~ Find all the skills we need to make a class skill
    foreach pick in hero from BaseSkill where tagids[ClassSkill.?,"|"]
       ~ Assign the Helper.ClassSkill tag to make a class skill
       perform eachpick.assign[Helper.ClassSkill]
    nexteach

    ~ Find all the Class Path Power Things
    foreach pick in hero from BaseClSpec where s2Power
       ~ Push all Allow Power tags to the Path Power Thing
       perform eachpick.pushtags[ClsAllowPs.?]
    nexteach

    ~ Find all the Class Path Skill Things
    foreach pick in hero from BaseClSpec where "thingid.cPWaPathSk"
       ~ Push all Allow Skil tags to the Path Skill Thing
       perform eachpick.pushtags[PathSkill.?]
    nexteach
    ]]>
  </procedure>


<!-- ****************************************************************** -->
<!-- Psicrystal Personality Bonuses PostLevel/20000                     -->
<!-- ****************************************************************** -->
  <procedure id="PsicryPers" context="pick"><![CDATA[
      ~ If we're within 1 mile or arms length apply personality bonus
      doneif (hero.tagcount[Psicrystal.Master?] = 0)

      var nS2Bonus as number

      ~ Set psicrystal bonus
      nS2Bonus += tagvalue[PsicrysBon.?]

      var S2TagID  as string
      var S2Target as string
      ~ Generate Thing ID tag
      S2TagID = tagids[PsicrystID.?,"|"]
      S2TagID = replace(S2TagID,"PsicrystID","thingid",0)
      ~ If Psycrstal gives a skill bonus process here
      If (tagis[PsicryType.Skill] <> 0) Then

        ~ If not all craft skills process here
        If (tagis[PsicrystID.AllCraft] = 0) Then
          ~ Set focus to the skill
          perform hero.findchild[BaseSkill,S2TagID].setfocus

        ~.. For all craft skills process here
        Else
          ~ Give bonus to all craft skills
          foreach pick in hero from BaseSkill where "Helper.SkCatCraft"
            eachpick.field[Bonus].value += nS2Bonus
          nexteach
        Endif

      ~..If psycristal gives a save bonus process here
      ElseIf (tagis[PsicryType.Save] <> 0) Then
        ~ Set focus to the skill
        perform hero.findchild[BaseSave,S2TagID].setfocus

      ~..If psycristal gives a bonus to something else
      ElseIf (tagis[PsicryType.Other] <> 0) Then

        ~ Initiative Bonus
        If (tagis[PsicrystID.Initiative] <> 0) Then
          hero.child[Initiative].field[Bonus].value += nS2Bonus

        ~..Concentration Bonus
        ElseIf (tagis[PsicrystID.Concentr] <> 0) Then
          herofield[tConcCheck].value += nS2Bonus

        ~..One Knowledge Skill bonus
        ElseIf (tagis[PsicrystID.Knowledge] <> 0) Then

          ~ If 2nd drop down chosen something then give it bonus
          If (field[usrChosen2].ischosen <> 0) Then
            field[usrChosen2].chosen.field[Bonus].value += nS2Bonus

          ~..If we have a Reference tag then use it to get the right knowledge skill
          ElseIf (tagcount[Reference.?] <> 0) Then
            S2Target = tagids[Reference.?]
            perform hero.findchild[BaseSkill,S2Target].setfocus
          Endif

        Endif

      Endif

      doneif (state.isfocus = 0)
      ~ Give bonus to focus
      focus.field[Bonus].value += nS2Bonus
    ]]>
  </procedure>


</document>